// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	packet "github.com/vx-labs/mqtt-protocol/packet"
	raftpb "go.etcd.io/etcd/raft/raftpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Payload struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Payload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Payload.Unmarshal(m, b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return xxx_messageInfo_Payload.Size(m)
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type RaftContext struct {
	ID                   uint64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Address              string   `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftContext) Reset()         { *m = RaftContext{} }
func (m *RaftContext) String() string { return proto.CompactTextString(m) }
func (*RaftContext) ProtoMessage()    {}
func (*RaftContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *RaftContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RaftContext.Unmarshal(m, b)
}
func (m *RaftContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RaftContext.Marshal(b, m, deterministic)
}
func (m *RaftContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftContext.Merge(m, src)
}
func (m *RaftContext) XXX_Size() int {
	return xxx_messageInfo_RaftContext.Size(m)
}
func (m *RaftContext) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftContext.DiscardUnknown(m)
}

var xxx_messageInfo_RaftContext proto.InternalMessageInfo

func (m *RaftContext) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *RaftContext) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type JoinClusterResponse struct {
	Peers                []*RaftContext `protobuf:"bytes,1,rep,name=Peers,proto3" json:"Peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *JoinClusterResponse) Reset()         { *m = JoinClusterResponse{} }
func (m *JoinClusterResponse) String() string { return proto.CompactTextString(m) }
func (*JoinClusterResponse) ProtoMessage()    {}
func (*JoinClusterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *JoinClusterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinClusterResponse.Unmarshal(m, b)
}
func (m *JoinClusterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinClusterResponse.Marshal(b, m, deterministic)
}
func (m *JoinClusterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinClusterResponse.Merge(m, src)
}
func (m *JoinClusterResponse) XXX_Size() int {
	return xxx_messageInfo_JoinClusterResponse.Size(m)
}
func (m *JoinClusterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinClusterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinClusterResponse proto.InternalMessageInfo

func (m *JoinClusterResponse) GetPeers() []*RaftContext {
	if m != nil {
		return m.Peers
	}
	return nil
}

type PeerResponse struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PeerResponse) Reset()         { *m = PeerResponse{} }
func (m *PeerResponse) String() string { return proto.CompactTextString(m) }
func (*PeerResponse) ProtoMessage()    {}
func (*PeerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *PeerResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PeerResponse.Unmarshal(m, b)
}
func (m *PeerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PeerResponse.Marshal(b, m, deterministic)
}
func (m *PeerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerResponse.Merge(m, src)
}
func (m *PeerResponse) XXX_Size() int {
	return xxx_messageInfo_PeerResponse.Size(m)
}
func (m *PeerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PeerResponse proto.InternalMessageInfo

func (m *PeerResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type CheckHealthRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckHealthRequest) Reset()         { *m = CheckHealthRequest{} }
func (m *CheckHealthRequest) String() string { return proto.CompactTextString(m) }
func (*CheckHealthRequest) ProtoMessage()    {}
func (*CheckHealthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *CheckHealthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckHealthRequest.Unmarshal(m, b)
}
func (m *CheckHealthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckHealthRequest.Marshal(b, m, deterministic)
}
func (m *CheckHealthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckHealthRequest.Merge(m, src)
}
func (m *CheckHealthRequest) XXX_Size() int {
	return xxx_messageInfo_CheckHealthRequest.Size(m)
}
func (m *CheckHealthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckHealthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckHealthRequest proto.InternalMessageInfo

type CheckHealthResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckHealthResponse) Reset()         { *m = CheckHealthResponse{} }
func (m *CheckHealthResponse) String() string { return proto.CompactTextString(m) }
func (*CheckHealthResponse) ProtoMessage()    {}
func (*CheckHealthResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *CheckHealthResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckHealthResponse.Unmarshal(m, b)
}
func (m *CheckHealthResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckHealthResponse.Marshal(b, m, deterministic)
}
func (m *CheckHealthResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckHealthResponse.Merge(m, src)
}
func (m *CheckHealthResponse) XXX_Size() int {
	return xxx_messageInfo_CheckHealthResponse.Size(m)
}
func (m *CheckHealthResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckHealthResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckHealthResponse proto.InternalMessageInfo

type DistributeMessageRequest struct {
	Message              *packet.Publish `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DistributeMessageRequest) Reset()         { *m = DistributeMessageRequest{} }
func (m *DistributeMessageRequest) String() string { return proto.CompactTextString(m) }
func (*DistributeMessageRequest) ProtoMessage()    {}
func (*DistributeMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *DistributeMessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributeMessageRequest.Unmarshal(m, b)
}
func (m *DistributeMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributeMessageRequest.Marshal(b, m, deterministic)
}
func (m *DistributeMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributeMessageRequest.Merge(m, src)
}
func (m *DistributeMessageRequest) XXX_Size() int {
	return xxx_messageInfo_DistributeMessageRequest.Size(m)
}
func (m *DistributeMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributeMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DistributeMessageRequest proto.InternalMessageInfo

func (m *DistributeMessageRequest) GetMessage() *packet.Publish {
	if m != nil {
		return m.Message
	}
	return nil
}

type DistributeMessageResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DistributeMessageResponse) Reset()         { *m = DistributeMessageResponse{} }
func (m *DistributeMessageResponse) String() string { return proto.CompactTextString(m) }
func (*DistributeMessageResponse) ProtoMessage()    {}
func (*DistributeMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *DistributeMessageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DistributeMessageResponse.Unmarshal(m, b)
}
func (m *DistributeMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DistributeMessageResponse.Marshal(b, m, deterministic)
}
func (m *DistributeMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributeMessageResponse.Merge(m, src)
}
func (m *DistributeMessageResponse) XXX_Size() int {
	return xxx_messageInfo_DistributeMessageResponse.Size(m)
}
func (m *DistributeMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributeMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DistributeMessageResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Payload)(nil), "api.Payload")
	proto.RegisterType((*RaftContext)(nil), "api.RaftContext")
	proto.RegisterType((*JoinClusterResponse)(nil), "api.JoinClusterResponse")
	proto.RegisterType((*PeerResponse)(nil), "api.PeerResponse")
	proto.RegisterType((*CheckHealthRequest)(nil), "api.CheckHealthRequest")
	proto.RegisterType((*CheckHealthResponse)(nil), "api.CheckHealthResponse")
	proto.RegisterType((*DistributeMessageRequest)(nil), "api.DistributeMessageRequest")
	proto.RegisterType((*DistributeMessageResponse)(nil), "api.DistributeMessageResponse")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 433 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0xe3, 0x34, 0x4f, 0xf2, 0x74, 0x1c, 0xb5, 0x74, 0xcb, 0x8b, 0x31, 0x2a, 0x8a, 0xf6,
	0x10, 0x85, 0x43, 0xd7, 0x10, 0x0e, 0x1c, 0x10, 0x07, 0x48, 0x90, 0x08, 0x52, 0xa5, 0xb0, 0xca,
	0x91, 0xcb, 0xda, 0x99, 0x26, 0x56, 0xdd, 0xac, 0xeb, 0x19, 0xa3, 0xf2, 0x99, 0xf9, 0x12, 0xc8,
	0x6b, 0x07, 0xa5, 0x4a, 0x7a, 0xf1, 0xee, 0xbc, 0xfc, 0xe7, 0xaf, 0xf9, 0x79, 0xe1, 0xd8, 0xe4,
	0xa9, 0xca, 0x0b, 0xcb, 0x56, 0x1c, 0x99, 0x3c, 0x0d, 0x87, 0x2b, 0xab, 0x90, 0x93, 0xa5, 0x4a,
	0x6d, 0x54, 0x9d, 0x51, 0x61, 0xae, 0xd9, 0x7d, 0xf2, 0xd8, 0x1d, 0x75, 0x73, 0xf8, 0x76, 0x95,
	0xf2, 0xba, 0x8c, 0x55, 0x62, 0x6f, 0xa3, 0x5f, 0xf7, 0x97, 0x99, 0x89, 0x29, 0xba, 0xbd, 0x63,
	0xbe, 0x74, 0xe5, 0xc4, 0x66, 0x51, 0x6e, 0x92, 0x1b, 0xe4, 0x28, 0x8f, 0x6b, 0x85, 0xbc, 0x80,
	0xde, 0xdc, 0xfc, 0xce, 0xac, 0x59, 0x0a, 0x01, 0x9d, 0xa9, 0x61, 0x13, 0x78, 0x03, 0x6f, 0xd4,
	0xd7, 0xee, 0x2e, 0x3f, 0x80, 0xaf, 0xcd, 0x35, 0x4f, 0xec, 0x86, 0xf1, 0x9e, 0xc5, 0x09, 0xb4,
	0x67, 0x53, 0xd7, 0xd0, 0xd1, 0xed, 0xd9, 0x54, 0x04, 0xd0, 0xfb, 0xbc, 0x5c, 0x16, 0x48, 0x14,
	0xb4, 0x07, 0xde, 0xe8, 0x58, 0x6f, 0x43, 0xf9, 0x09, 0xce, 0xbf, 0xdb, 0x74, 0x33, 0xc9, 0x4a,
	0x62, 0x2c, 0x34, 0x52, 0x6e, 0x37, 0x84, 0x62, 0x08, 0xff, 0xcd, 0x11, 0x0b, 0x0a, 0xbc, 0xc1,
	0xd1, 0xc8, 0x1f, 0x3f, 0x51, 0xd5, 0xa2, 0x3b, 0x0e, 0xba, 0x2e, 0xcb, 0x21, 0xf4, 0xab, 0xcb,
	0x3f, 0xdd, 0x73, 0xe8, 0x12, 0x1b, 0x2e, 0xc9, 0x99, 0xff, 0xaf, 0x9b, 0x48, 0x3e, 0x05, 0x31,
	0x59, 0x63, 0x72, 0xf3, 0x0d, 0x4d, 0xc6, 0x6b, 0x8d, 0x77, 0x25, 0x12, 0xcb, 0x67, 0x70, 0xfe,
	0x20, 0x5b, 0x0f, 0x91, 0x5f, 0x21, 0x98, 0xa6, 0xc4, 0x45, 0x1a, 0x97, 0x8c, 0x57, 0x48, 0x64,
	0x56, 0xd8, 0x48, 0xc4, 0x1b, 0xe8, 0x35, 0x19, 0xe7, 0xe0, 0x8f, 0x4f, 0x55, 0x8d, 0x4a, 0xcd,
	0xcb, 0x38, 0x4b, 0x69, 0xad, 0xb7, 0x75, 0xf9, 0x0a, 0x5e, 0x1e, 0x18, 0x53, 0x7b, 0x8c, 0xff,
	0x78, 0xd0, 0xa9, 0xf6, 0x11, 0xef, 0xe0, 0x64, 0x5e, 0xd8, 0x04, 0x89, 0x9a, 0x16, 0x71, 0xaa,
	0xea, 0x1f, 0xa6, 0x9a, 0x44, 0xd8, 0x77, 0xdb, 0x37, 0xf8, 0x65, 0x4b, 0x7c, 0x04, 0x7f, 0x87,
	0x99, 0xd8, 0x83, 0x13, 0x06, 0x2e, 0x73, 0x80, 0xab, 0x6c, 0x89, 0x08, 0xba, 0x33, 0xaa, 0x98,
	0x1d, 0xd0, 0x9d, 0xd5, 0x46, 0xf8, 0x40, 0xf0, 0x05, 0xfc, 0x1d, 0x48, 0xe2, 0x85, 0xeb, 0xd9,
	0x87, 0xd9, 0x98, 0x1e, 0xe2, 0xd9, 0x1a, 0xff, 0x84, 0xce, 0xd5, 0x8f, 0xc5, 0x42, 0x2c, 0xe0,
	0x6c, 0x0f, 0x89, 0xb8, 0x70, 0xc2, 0xc7, 0x88, 0x87, 0xaf, 0x1f, 0x2b, 0x6f, 0xa7, 0xc7, 0x5d,
	0xf7, 0x44, 0xdf, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x38, 0x54, 0xf3, 0xea, 0x0e, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	ProcessMessage(ctx context.Context, in *raftpb.Message, opts ...grpc.CallOption) (*Payload, error)
	JoinCluster(ctx context.Context, in *RaftContext, opts ...grpc.CallOption) (*JoinClusterResponse, error)
	IsPeer(ctx context.Context, in *RaftContext, opts ...grpc.CallOption) (*PeerResponse, error)
	CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthResponse, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) ProcessMessage(ctx context.Context, in *raftpb.Message, opts ...grpc.CallOption) (*Payload, error) {
	out := new(Payload)
	err := c.cc.Invoke(ctx, "/api.Raft/ProcessMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) JoinCluster(ctx context.Context, in *RaftContext, opts ...grpc.CallOption) (*JoinClusterResponse, error) {
	out := new(JoinClusterResponse)
	err := c.cc.Invoke(ctx, "/api.Raft/JoinCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) IsPeer(ctx context.Context, in *RaftContext, opts ...grpc.CallOption) (*PeerResponse, error) {
	out := new(PeerResponse)
	err := c.cc.Invoke(ctx, "/api.Raft/IsPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthResponse, error) {
	out := new(CheckHealthResponse)
	err := c.cc.Invoke(ctx, "/api.Raft/CheckHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	ProcessMessage(context.Context, *raftpb.Message) (*Payload, error)
	JoinCluster(context.Context, *RaftContext) (*JoinClusterResponse, error)
	IsPeer(context.Context, *RaftContext) (*PeerResponse, error)
	CheckHealth(context.Context, *CheckHealthRequest) (*CheckHealthResponse, error)
}

// UnimplementedRaftServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (*UnimplementedRaftServer) ProcessMessage(ctx context.Context, req *raftpb.Message) (*Payload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessMessage not implemented")
}
func (*UnimplementedRaftServer) JoinCluster(ctx context.Context, req *RaftContext) (*JoinClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinCluster not implemented")
}
func (*UnimplementedRaftServer) IsPeer(ctx context.Context, req *RaftContext) (*PeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPeer not implemented")
}
func (*UnimplementedRaftServer) CheckHealth(ctx context.Context, req *CheckHealthRequest) (*CheckHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_ProcessMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(raftpb.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).ProcessMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Raft/ProcessMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).ProcessMessage(ctx, req.(*raftpb.Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_JoinCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).JoinCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Raft/JoinCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).JoinCluster(ctx, req.(*RaftContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_IsPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RaftContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).IsPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Raft/IsPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).IsPeer(ctx, req.(*RaftContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Raft/CheckHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).CheckHealth(ctx, req.(*CheckHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessMessage",
			Handler:    _Raft_ProcessMessage_Handler,
		},
		{
			MethodName: "JoinCluster",
			Handler:    _Raft_JoinCluster_Handler,
		},
		{
			MethodName: "IsPeer",
			Handler:    _Raft_IsPeer_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _Raft_CheckHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// MQTTClient is the client API for MQTT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MQTTClient interface {
	DistributeMessage(ctx context.Context, in *DistributeMessageRequest, opts ...grpc.CallOption) (*DistributeMessageResponse, error)
}

type mQTTClient struct {
	cc *grpc.ClientConn
}

func NewMQTTClient(cc *grpc.ClientConn) MQTTClient {
	return &mQTTClient{cc}
}

func (c *mQTTClient) DistributeMessage(ctx context.Context, in *DistributeMessageRequest, opts ...grpc.CallOption) (*DistributeMessageResponse, error) {
	out := new(DistributeMessageResponse)
	err := c.cc.Invoke(ctx, "/api.MQTT/DistributeMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MQTTServer is the server API for MQTT service.
type MQTTServer interface {
	DistributeMessage(context.Context, *DistributeMessageRequest) (*DistributeMessageResponse, error)
}

// UnimplementedMQTTServer can be embedded to have forward compatible implementations.
type UnimplementedMQTTServer struct {
}

func (*UnimplementedMQTTServer) DistributeMessage(ctx context.Context, req *DistributeMessageRequest) (*DistributeMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributeMessage not implemented")
}

func RegisterMQTTServer(s *grpc.Server, srv MQTTServer) {
	s.RegisterService(&_MQTT_serviceDesc, srv)
}

func _MQTT_DistributeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributeMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTServer).DistributeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MQTT/DistributeMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTServer).DistributeMessage(ctx, req.(*DistributeMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MQTT_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.MQTT",
	HandlerType: (*MQTTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DistributeMessage",
			Handler:    _MQTT_DistributeMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
